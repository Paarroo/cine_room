<div class="glass-effect p-6 rounded-2xl">
  <h3 class="text-xl font-bold text-white mb-6 flex items-center">
    <span class="mr-2">üì±</span>
    Scanner QR Code d'Entr√©e
  </h3>

  <!-- QR Scanner Interface -->
  <div id="qr-scanner-container" class="space-y-4">
    <!-- Camera Preview -->
    <div class="relative">
      <video id="qr-scanner-video" 
             class="w-full max-w-md mx-auto rounded-xl bg-black" 
             style="display: none;">
      </video>
      
      <div id="qr-scanner-placeholder" 
           class="w-full max-w-md mx-auto h-64 bg-slate-800 rounded-xl flex items-center justify-center border-2 border-dashed border-slate-600">
        <div class="text-center">
          <span class="text-4xl mb-2 block">üì∑</span>
          <p class="text-slate-400">Cliquez pour activer la cam√©ra</p>
        </div>
      </div>
    </div>

    <!-- Controls -->
    <div class="flex justify-center space-x-4">
      <button id="start-scanner" 
              class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl transition-colors flex items-center space-x-2">
        <span>üì∑</span>
        <span>D√©marrer Scanner</span>
      </button>
      
      <button id="stop-scanner" 
              class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl transition-colors flex items-center space-x-2" 
              style="display: none;">
        <span>‚èπÔ∏è</span>
        <span>Arr√™ter</span>
      </button>
    </div>

    <!-- Manual Input Fallback -->
    <div class="mt-6 p-4 border border-slate-600 rounded-xl bg-slate-800/50">
      <h4 class="font-semibold text-white mb-3">Saisie manuelle (si scanner ne fonctionne pas)</h4>
      
      <div class="space-y-3">
        <div>
          <label class="block text-sm font-medium text-slate-300 mb-2">
            Token QR Code :
          </label>
          <input type="text" 
                 id="manual-qr-token" 
                 placeholder="Collez ou tapez le token du QR code"
                 class="w-full px-4 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-slate-300 mb-2">
            ID Participation :
          </label>
          <input type="number" 
                 id="manual-participation-id" 
                 placeholder="ID de la participation"
                 class="w-full px-4 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500">
        </div>
        
        <button id="manual-checkin" 
                class="bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg transition-colors flex items-center space-x-2">
          <span>‚úÖ</span>
          <span>Valider Entr√©e</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Results Display -->
  <div id="scan-results" class="mt-6" style="display: none;"></div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let scanner = null;
  let scanning = false;

  const video = document.getElementById('qr-scanner-video');
  const placeholder = document.getElementById('qr-scanner-placeholder');
  const startBtn = document.getElementById('start-scanner');
  const stopBtn = document.getElementById('stop-scanner');
  const resultsDiv = document.getElementById('scan-results');

  // Check if we have camera access
  const hasCamera = navigator.mediaDevices && navigator.mediaDevices.getUserMedia;

  if (!hasCamera) {
    startBtn.disabled = true;
    startBtn.innerHTML = '<span>‚ùå</span><span>Cam√©ra non disponible</span>';
    startBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
    startBtn.classList.add('bg-gray-600');
  }

  startBtn.addEventListener('click', startScanner);
  stopBtn.addEventListener('click', stopScanner);

  // Manual check-in
  document.getElementById('manual-checkin').addEventListener('click', function() {
    const token = document.getElementById('manual-qr-token').value.trim();
    const participationId = document.getElementById('manual-participation-id').value.trim();
    
    if (!token || !participationId) {
      showResult('error', 'Veuillez remplir tous les champs');
      return;
    }
    
    performCheckIn(participationId, token);
  });

  async function startScanner() {
    if (!hasCamera) return;

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: 'environment' } 
      });
      
      video.srcObject = stream;
      video.style.display = 'block';
      placeholder.style.display = 'none';
      startBtn.style.display = 'none';
      stopBtn.style.display = 'flex';
      
      scanning = true;
      scanForQRCode();
      
    } catch (err) {
      console.error('Erreur acc√®s cam√©ra:', err);
      showResult('error', 'Impossible d\'acc√©der √† la cam√©ra');
    }
  }

  function stopScanner() {
    scanning = false;
    
    if (video.srcObject) {
      video.srcObject.getTracks().forEach(track => track.stop());
    }
    
    video.style.display = 'none';
    placeholder.style.display = 'flex';
    startBtn.style.display = 'flex';
    stopBtn.style.display = 'none';
  }

  // Note: This is a simplified QR scanning - in production you'd use a library like jsQR
  function scanForQRCode() {
    if (!scanning) return;

    // In a real implementation, you'd use jsQR or similar library
    // For now, this is a placeholder that checks for manual input
    setTimeout(() => {
      if (scanning) {
        scanForQRCode();
      }
    }, 100);
  }

  async function performCheckIn(participationId, qrToken) {
    try {
      showResult('info', 'Validation en cours...');
      
      const response = await fetch(`/participations/${participationId}/check_ins`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({
          qr_token: qrToken
        })
      });

      const data = await response.json();

      if (data.success) {
        showResult('success', `‚úÖ Entr√©e valid√©e pour ${data.participation.user_name}`, data.participation);
        
        // Clear manual inputs
        document.getElementById('manual-qr-token').value = '';
        document.getElementById('manual-participation-id').value = '';
      } else {
        showResult('error', data.message);
      }
    } catch (error) {
      console.error('Erreur check-in:', error);
      showResult('error', 'Erreur lors de la validation');
    }
  }

  function showResult(type, message, data = null) {
    const colors = {
      success: 'bg-green-500/20 border-green-500/30 text-green-400',
      error: 'bg-red-500/20 border-red-500/30 text-red-400',
      info: 'bg-blue-500/20 border-blue-500/30 text-blue-400'
    };

    let content = `
      <div class="p-4 rounded-xl border ${colors[type]}">
        <p class="font-semibold">${message}</p>
    `;

    if (data) {
      content += `
        <div class="mt-3 text-sm space-y-1">
          <p><strong>Participant:</strong> ${data.user_name}</p>
          <p><strong>Email:</strong> ${data.user_email}</p>
          <p><strong>√âv√©nement:</strong> ${data.event_title}</p>
          <p><strong>Places:</strong> ${data.seats}</p>
          <p><strong>Valid√© √†:</strong> ${new Date(data.checked_in_at).toLocaleString('fr-FR')}</p>
        </div>
      `;
    }

    content += '</div>';

    resultsDiv.innerHTML = content;
    resultsDiv.style.display = 'block';

    // Auto-hide after 5 seconds for success messages
    if (type === 'success') {
      setTimeout(() => {
        resultsDiv.style.display = 'none';
      }, 5000);
    }
  }
});
</script>